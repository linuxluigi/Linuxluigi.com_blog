<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Linuxluigi.com</title><link href="https://linuxluigi.com/" rel="alternate"></link><link href="https://linuxluigi.com/feeds/all.atom.xml" rel="self"></link><id>https://linuxluigi.com/</id><updated>2019-10-07T18:12:00+02:00</updated><entry><title>Eigener OpenStreetMap Tile-Server mit Zeitsensitivit√§t</title><link href="https://linuxluigi.com/posts/2019/Sep/30/osm-zeit-sensitiv/" rel="alternate"></link><published>2019-09-30T18:00:00+02:00</published><updated>2019-10-07T18:12:00+02:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2019-09-30:/posts/2019/Sep/30/osm-zeit-sensitiv/</id><summary type="html">&lt;p class="first last"&gt;5 Monate Arbeit an ein eigenen OpenStreetMap Tile Server der Zeitangaben akzeptiert&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="einleitung"&gt;
&lt;h2&gt;Einleitung&lt;/h2&gt;
&lt;p&gt;Es fing damit an, dass ich ein Projekt in den Fach Ortsbasierten Informationssysteme ausarbeiten sollte. Das Projekt sollte zu
80% in meiner Note einflie√üen. Urspr√ºnglich wollte ich nur die vorhandenen Systeme Dokumentieren und Grafisch aufbereiten.
Doch schon bei der Dokumentation des erstens Projekt, mit Hilfe von Mapnik ein eigenen OpenStreetMap Tile Server zu
erstellen welcher Zeitangaben akzeptiert, hatte ich aufgeh√∂rt zu Dokumentieren und fing an dem Team zu helfen, welches das System
zum laufen zu bringen soll. Immer mehr habe ich mich in dem Team eingearbeitet und fing an umfangreich Code beizusteuern.
So habe ich erst ein Docker System aufgebaut wo einen normalen Mapnik Tile-Server drauf lief und lernte erst einmal die
einzelnen Komponenten kennen. Am Anfang dachte ich erst man m√ºsste den OpenStreetMap Tile Server aufbohren und ihn
beibringen Zeitangaben zu akzeptieren. Doch mein Prof hat mir schnell erkl√§rt das er vom forken nicht viel h√§lt, da es
schwer zu warten ist und so ein Uniprojekt m√ºsse einfach bleiben.&lt;/p&gt;
&lt;p&gt;Na gut dann halt etwas anderes. Der n√§chste Ansatz war f√ºr mich mit Flask &amp;amp; Python ein eigenen Tile Server zu schreiben.
Das ging ziemlich flott, nachdem ich herausbekommen habe welche Abh√§ngigkeiten alles ben√∂tigt werden.
Der n√§chste Schritt war anschlie√üend die Abh√§ngigkeit &lt;a class="reference external" href="https://github.com/gravitystorm/openstreetmap-carto"&gt;https://github.com/gravitystorm/openstreetmap-carto&lt;/a&gt; die Zeitangaben
bei zu bringen. Auch hier versuchte ich mein Gl√ºck und fragte den Prof ob wir nicht wenigstens dieses Projekt forken
k√∂nnen, es muss hier auch nur eine Datei gewartet werden. Die Datei welche die SQL beinhaltet. Das sollte nicht so schwer
zu warten sein, meinte ich. Aber auch hier war seine Antwort, dass er sicher lieber ein Tool w√ºnscht welches die &lt;cite&gt;project.mml&lt;/cite&gt; Zeit
sensitiv macht. Nun gut, mein Team braucht ja auch Aufgaben und wollten sich diesen Punkt widmen. Mir war es recht, denn so
konnte ich mich ungest√∂rt der Webentwicklung konzentrieren. Yeah üòé&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="der-simple-tile-server"&gt;
&lt;h2&gt;Der Simple Tile-Server&lt;/h2&gt;
&lt;p&gt;Da mein Prof es m√∂glich simple haben wollte, habe ich den Webserver zuerst als eine Flask App geschrieben. Innerhalb von
100 Zeilen Code &amp;amp; Kommentaren war der Tile Server mit ein einfachen Caching geschrieben. Etwas z√§h und in meinen Augen
nicht Produktionsreif aber der Proof-of-Concept war damit geschaffen. Als n√§chstes wollte ich noch eine Tile-Producer-Queue
hinzuf√ºgen. So das eine Tile URL nur ein Tile vom System erstellt wird und nicht wenn mehrere User die URL
gleichzeitig aufrufen, dass das Tile mehrfach parallel erstellt wird. Aber mein Prof rudert mich auch hier wieder zur√ºck
:'( ich sollte doch lieber die Dokumentation schreiben und es wartungsfreundlich zu machen.
Nun gut, den Punkt verstehe ja. Also Dokumentation schreiben und gut ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="der-komplexe-tile-server"&gt;
&lt;h2&gt;Der Komplexe Tile-Server&lt;/h2&gt;
&lt;p&gt;Der simple Server war ja fertig und mein Team war mit den SQL Part besch√§ftigt. Ich hatte keine Vorlesungen und Zeit. So konnte
mich meinen Entwickler Herz frei hingeben, etwas nebenbei Arbeiten und mich weiter in der Materie einlesen.
Ich arbeite liebend gerne mit dem Web-Framework Django. Das ist das gro√üe Python Web Framework, wie geschaffen f√ºr eine
solch komplexe Aufgabe dachte ich mir. Die erste Frage die ich mir stellte, kann Django die OpenStreetMap Datenbank mappen?
In diversen Foren &amp;amp; Stackoverflow gab es diesbez√ºglich viele Anfragen aber keine direkte L√∂sung. Also recherchierte ich
weiter ob Django ORM Tool es zul√§sst eine bestehende Datenbank als ein Django Model zu konvertieren und siehe da, Django
kann es Wuhuu üòÅ
Das ich jetzt mehrere Tage brauchte um ein Docker Container zu erstellen wo Django mit PostGis Unterst√ºtzung l√§uft, sei
jetzt mal dahin gestellt. F√ºr mich f√ºhlte es sich nur wie wenige Stunden an üòù
Jetzt nur noch kurz probieren ob ich ein Tile auf die Datenbank projektieren kann ... ... Ja es geht und die Abfrage
von wann bis wann die das Tile valide ist, work like a Charme.
Ich f√ºhlte mich zwar etwas schlecht dabei, das ich schon so viel probierte. Da ich mein Prof mir anbot meine
Bachelorarbeit in dem Thema zu schreiben (Tile Caching mit Zeitraum Angabe) aber es f√ºhlte sich zu simple an.
Ich wollte mehr und steigerte mich weiter rein.&lt;/p&gt;
&lt;p&gt;Nun gut das Tile Caching war innerhalb eines Vormittags so weit angepasst, das der Server nun ein Zeitraum festlegen
konnte von wann bis wann das Tile valide ist.&lt;/p&gt;
&lt;p&gt;Der n√§chste Schritt, die Tile Producer Queue. Die war schon etwas kniffliger. Hierzu nutze ich Celery, ein Tool
um Aufgaben in extra Container und einer Producer Queue zu l√∂sen. Da ich noch nie Celery bevor nutze musste ich mich
erst einmal einige Stunden einlesen was das √ºberhaupt ist und zu was man es verwenden kann. Um so mehr ich mich einlas
um so mehr war ich der Meinung das es das Tool ist was ich brauche. Also √Ñrmel hochgekrempelt, Dinkelkaffe geschnappt
und ran ans Werk.
Damit gleich das Caching richtig integriert ist, habe ich erst einmal ein Django Model erstellt, welches Informationen
√ºber bereits erstellte Tiles &amp;amp; Tiles die gerade bearbeitet werden erstellt. So konnte ich schon einmal sicherstellen
das ein Tile nur einmal bearbeitet wird und ein zweiter User das Tile von den Request zuvor erh√§lt. Die Ausgabe der Tiles
erfolgt bei beiden Usern gleichzeitig, sobald es halt fertig ist :) Um die Performance hoch zu halten werden die fertigen
Tiles nicht in der Datenbank gesichert sondern in einem Redis Cache hochgeladen, welcher mir auch die Aufgabe abnimmt, alte
und nicht mehr ben√∂tigte Tiles automatisch aus dem System zu l√∂schen.&lt;/p&gt;
&lt;p&gt;Aber auch hier war die Arbeit in ein bis zwei Tagen gut erledigt und ich war zufrieden und konnte etwas durchatmen und
von Projekt in ruhe Abstand nehmen.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="der-sql-part"&gt;
&lt;h2&gt;Der SQL Part&lt;/h2&gt;
&lt;p&gt;Ja eigentlich war es der Plan das meine Kollegen sich mit dem Thema besch√§ftigen aber sie hatten Probleme und wir trafen
uns gemeinsam. Okay, an sich kein Problem, ich wollte mich f√ºr meine Bachelorarbeit eh mehr mit der OSM Datenbank
besch√§ftigen.
Nach einigen Stunden gemeinsam am Tool arbeiten welches die &lt;cite&gt;project.mml&lt;/cite&gt; Zeit sensitiv machen soll, gaben wir auf ...
Wir sahen kein Ende der Arbeit. Sobald wir einige Statements fertigstellen haben, haben wir diese an einer anderen Stelle
zerst√∂rt. Also hat einer aus dem SQL Team die Aufgabe √ºbernommen die SQL Statements per Hand zu √§ndern und das
Projekt zu forken &lt;a class="reference external" href="https://github.com/linuxluigi/openstreetmap-carto/"&gt;https://github.com/linuxluigi/openstreetmap-carto/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Damit mein Kollege das Projekt gut bearbeiten kann, habe ich extra Debug URL's eingef√ºgt, so das die &lt;cite&gt;project.mml&lt;/cite&gt;
mithilfe von &lt;cite&gt;carto&lt;/cite&gt; zu einer &lt;cite&gt;style.xml&lt;/cite&gt; zu konvertieren, welche der Tile-Server akzeptiert. An sich sehr praktisch
um an dem System langfristig zu arbeiten. Bei der Gelegenheit habe ich auch gleich eine URL eingef√ºgt, wo ein normales
Tile erstellt wird, welches nicht Zeit sensitiv sind.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="die-dokumention-travis"&gt;
&lt;h2&gt;Die Dokumention &amp;amp; Travis&lt;/h2&gt;
&lt;p&gt;Die Dokumentation ging recht flott von der Hand. In Gedanken √ºberlegte ich zwar was ich vergessen habe aufzuschreiben
aber in gro√üen und ganzen sollte das meiste dabei sein, der Rest kommt halt nach.
Was mich aber viel mehr fertig machte ... testen mit &lt;cite&gt;TRAVIS&lt;/cite&gt;, an sich l√§uft es gut aber sobald ich versuchte in Travis
&lt;cite&gt;Postgis&lt;/cite&gt; zu integrieren kamen bei mir immer Fehler. Das Problem dabei war auch, jeder Test dauerte zwischen 15 bis 45
Minuten... Aber auch nach Tagen keine L√∂sung. Egal, lass es erst einmal sacken vielleicht f√§llt mir ja sp√§ter was ein.
Heute nun habe ich auf Reddit mein Projekt vorgestellt -&amp;gt; &lt;a class="reference external" href="https://www.reddit.com/r/django/comments/db8jvb/feedback_for_a_time_sensitive_openstreetmap/"&gt;https://www.reddit.com/r/django/comments/db8jvb/feedback_for_a_time_sensitive_openstreetmap/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nach 8 Stunden kam das erste Feedback zu mein gro√ües Problem &lt;cite&gt;TRAVIS&lt;/cite&gt;. Der User meinte, ich k√∂nnte es doch mit Docker
l√∂sen -.- warum ich mir die Arbeit mache 2 Systeme aufzubauen. Nun wei√ü ich was ich morgen Probieren werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fazit"&gt;
&lt;h2&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Ich bin ziemlich happy √ºber das Ergebnis, es ist zwar noch etwas Arbeit um es Produktion f√§hig zu machen aber es
ist Absehbar. Die n√§chste Aufgabe wird hoffentlich sein, die Zukunft abzubilden. Ein Kartenmaterial zu erzeugen welches
den steigenden Meeresspiegel simuliert, mein Prof hat grunds√§tzlich gemeint das es funktionieren sollte. Ich werde
diesbez√ºglich noch etwas recherchieren und mit etwas Gl√ºck wird das nun meine Bachelorarbeit üòâ&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-zu-travis"&gt;
&lt;h2&gt;Update zu Travis&lt;/h2&gt;
&lt;p&gt;Kurz um, es l√§uft super. Die Test laufen nun auch viel schneller durch und ich kann gleichzeitig die Docker Container testen.&lt;/p&gt;
&lt;/div&gt;
</content><category term="Docker"></category><category term="Erfahrung"></category><category term="OHDM"></category><category term="OSM"></category><category term="Django"></category><category term="Flask"></category></entry><entry><title>Banana Pi Resilio Sync File Server</title><link href="https://linuxluigi.com/posts/2019/M%C3%A4r/04/docker-erste-erfahrung/" rel="alternate"></link><published>2019-03-04T18:50:00+01:00</published><updated>2019-03-04T18:50:00+01:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2019-03-04:/posts/2019/M√§r/04/docker-erste-erfahrung/</id><summary type="html">&lt;p class="first last"&gt;Mein erstes Docker Erlebnis in der Uni&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="einleitung"&gt;
&lt;h2&gt;Einleitung&lt;/h2&gt;
&lt;p&gt;Im letzten Semster mussten wir zu 8 die Webiste des HTW-Computermuseums neu gestalten. Leider stellten wir w√§hrend des
Projektes fest, dass die Server Infrastruktur neu erstellt werden muss. So diskutierten wir im Team, was f√ºr M√∂glichkeiten
es gibt, die folgende Kriterien erf√ºllen:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Projekt Versionierung:&lt;/strong&gt; Damit die get√§tigten √Ñnderungen am System immer protokolliert werden m√ºssen und auch
Design√§nderungen leicht durchzuf√ºhren sind.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple Instanzen:&lt;/strong&gt; Entwicklungsumgebung, Staging Server &amp;amp; Produktion Server sollen m√∂glichst identisch sein.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Einheitliche Entwicklungsumgebung:&lt;/strong&gt; Entwicklungsumgebung soll leicht zu installieren sein und auf Linux, Mac &amp;amp;
Windows ohne gro√üen Zeitaufwand einrichtbar sein.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keine extra kosten:&lt;/strong&gt; die verwendete Software sollte keine Extrakosten durch Lizensen verursachen.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sandboxing:&lt;/strong&gt; M√∂glich Sandboxing von Microservices.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker hat alle diese Voraussetzung erf√ºllt und ich pers√∂nlich freute mich endlich einmal Zeit zu nehmen, um mich in Docker
einzuarbeiten :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="die-ersten-2-wochen"&gt;
&lt;h2&gt;Die ersten 2 Wochen&lt;/h2&gt;
&lt;p&gt;Hierbei sei gesagt, ich habe im Durchschnitt 1 bis 2 Tage die Woche am Projekt gearbeitet, aber vor dem Schlafengehen
oder in der Bahn mir mehrere Dokumenationen von Docker angesehen.&lt;/p&gt;
&lt;p&gt;Die Anfangszeit war etwas schwer, ich verstand schnell, wie ich mittels einer Dockerfile ein Linux-Container aufsetzen kann.
Wie ich aus verschiedene Linux Distros w√§hle und mir mein Wunschsystem zusammenstelle. Doch einfache Websites mit SSL
und Domain Weiterleitung erschienen mir √§u√üerst kompliziert, sowie wie eine Dockerfile mit Git versioniert werden ohne
Docker Hub.&lt;/p&gt;
&lt;p&gt;In laufe der Zeit kam ich dann langsam zu Docker-Compose, wo ich mehrere Docker-Container in einer Datei verwalten konnte.
Auch die Verwendung von Enviroment Variablen verstand ich so langsam. So dass Domains und Logindaten nicht l√§nger
hardcoded werden m√ºssen. &lt;cite&gt;Yeah :)&lt;/cite&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="traefik-http-reverse-proxy-load-balancer"&gt;
&lt;h2&gt;Traefik - HTTP reverse proxy &amp;amp; load balancer&lt;/h2&gt;
&lt;p&gt;Nach einer Zeit bin ich dann auf &lt;a class="reference external" href="https://traefik.io/"&gt;Traefik&lt;/a&gt; gesto√üen. Ein HTTP &lt;cite&gt;reverse proxy und load balancer&lt;/cite&gt;, praktischerweise
gibt es auch offiziellen Docker Support von Traefik. So konnte ich auf einmal sehr leicht automatische SSL Zertifikate
von Let's Encrypt erstellen. Nun bekam jeder Website Container sein eigenes SSL Zertifikat. Auch enth√§lt Traefik ein
Domain Routing, nun war es m√∂glich f√ºr mehrere Domains innerhalb einer Docker Compose File zu verwalten. Die &lt;cite&gt;www&lt;/cite&gt;
Subdomain zeigte dabei auf den Wordpress Container, &lt;cite&gt;db-admin&lt;/cite&gt; auf Adminer &amp;amp; &lt;cite&gt;admin&lt;/cite&gt; auf Collective Access.&lt;/p&gt;
&lt;p&gt;Nachdem ich so langsam mit Traefik zurecht kam und mir die Doku diesbez√ºglich durchgelesen habe, fing ich an
Docker-Compose immer mehr zu feiern. So √ºberlegte ich auch, wie praktisch die Software in anderen Projekten ist und wie
leicht diese zu verwalten ist.&lt;/p&gt;
&lt;p&gt;Ich war nun von Docker gefesselt!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="collective-access-museums-ausstellungsstucke-verwaltungs-software"&gt;
&lt;h2&gt;Collective Access - Museums Ausstellungsst√ºcke Verwaltungs Software&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.collectiveaccess.org/"&gt;Collective Access&lt;/a&gt; ist die Verwaltungswebsite von dem Computer Museum. Diese sollte nat√ºrlich auch in Docker-Compose
integriert werden. Diese Aufgabe war die schwierigste.&lt;/p&gt;
&lt;p&gt;Als Erstes schauten wir, ob ein Docker Image f√ºr Collective Access existiert, dies war zwar der Fall, doch wurde
dieses Image nicht mehr aktiv gewartet und fiel dadurch aus.&lt;/p&gt;
&lt;p&gt;Als N√§chstes probierte ich ein simplen NGINX Container mit PHP zu erstellen. Collective Access sollte in diesem Versuch
im Docker-Compose vollst√§ndig heruntergeladen werden. So lud ich Collective Access Git Repo innerhalb des Docker-Compose
Projektes herunter. Das funktionierte anfangs relativ gut, doch war der Aufbau ziemlich unstabil. Wenn ich die Ordner
Strukture √§ndern wollte, waren die Git Links nicht gleichzeitig aktualisiert worden. Auf anderen Ger√§ten wurde
Collective Access nicht immer heruntergeladen. Das gr√∂√üte Problem war aber, dass die Zugriffsrechte nicht richtig gesetzt
waren mit diesem Ansatz... Zu viele Probleme, also ein anderer Weg muss her.&lt;/p&gt;
&lt;p&gt;Der n√§chste Weg war es den NGINX Docker Container zu bearbeiten und dort Collective Access zu laden. Am Anfang versuchte
ich mir einen komplett eigenen NGINX Container zu erstellen, was aber doch zu viel Zeit ben√∂tigte. Einige Abschnitte
des Testens ben√∂tigiten mehrere Minuten um die √Ñnderungen zu testen.&lt;/p&gt;
&lt;p&gt;So viel Zeit hatte ich leider nicht und schaute im Internet, was es noch f√ºr L√∂sungen gab. Ich fand &lt;a class="reference external" href="https://gitlab.com/ric_harvey/nginx-php-fpm"&gt;nginx-php-fpm&lt;/a&gt;
ein Docker Image welches NGINX, PHP &amp;amp; Git enthielt. √úber Enviroment Variablen war es auch m√∂glich eigene Git URLs &amp;amp;
Git Tags zu √ºbergeben. So l√§dt sich der Container am ersten Start das aktuelle Git Repo herunter und spring danach auf den
gew√ºnschten Tag. Auch konnte ich schnell eine Config File f√ºr Collective Access erstellen, welches auch auf dem Container
deployed wird.&lt;/p&gt;
&lt;p&gt;So weit so gut. Nun lief der Container grundlegend. Aber was ich bislang √ºbersah, Collective Access wurde bislang nur
f√ºr Apache Webserver entwickelt und die NGINX Unterst√ºtzung sollte erst in den kommenden Versionen folgen. Das Hauptproblem
war dabei die &lt;cite&gt;.htaccess&lt;/cite&gt; Datein. Diese Datein werden nur von Apache gelesen und nicht von NGINX. So musste ich anfangen
die &lt;cite&gt;.htaccess&lt;/cite&gt; Datein in NGINX zu √ºbersetzen. Dies ben√∂tigte zwar etwas Arbeit, war aber leichter als ein Apache
Docker Container zu erstellen.&lt;/p&gt;
&lt;/div&gt;
</content><category term="docker"></category><category term="erfahrung"></category></entry><entry><title>Banana Pi Resilio Sync File Server</title><link href="https://linuxluigi.com/posts/2017/Okt/31/Resilio-Sync-Banana-Pi-Tutorial/" rel="alternate"></link><published>2017-10-31T11:05:00+01:00</published><updated>2017-10-31T11:05:00+01:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2017-10-31:/posts/2017/Okt/31/Resilio-Sync-Banana-Pi-Tutorial/</id><summary type="html">&lt;p class="first last"&gt;Resilio Sync Banana Pi Tutorial. Sichere dezentrale home cloud.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="voraussetzung"&gt;
&lt;h2&gt;Voraussetzung&lt;/h2&gt;
&lt;div class="section" id="ziel"&gt;
&lt;h3&gt;Ziel&lt;/h3&gt;
&lt;p&gt;Dieses Tutorial wird ein &lt;a class="reference external" href="http://www.banana-pi.org/m1.html"&gt;Banana Pi M1&lt;/a&gt; mit einer USB Festplatte zu einen &lt;a class="reference external" href="https://www.resilio.com/"&gt;Resilio Sync&lt;/a&gt; dezentralen File Server.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="benotigte-hardware"&gt;
&lt;h3&gt;Ben√∂tigte Hardware&lt;/h3&gt;
&lt;p&gt;Die Folgende Hardware Liste ist nur ein Beispiel, es muss nicht genau diese kombination gew√§hlt werden, es ist auch
m√∂glich andere Komponenten zu w√§hlen. Diese hier aufgez√§hlten Produkte haben sich bei mit in der Praxis bew√§hrt und kann
sie damit auch gut weiter empfelen.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="85%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;Hardware Typ&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;strong&gt;Amazon Affiliate Links&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Micro Server&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://amzn.to/2zkxsvj"&gt;Banana Pi Mark 1&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;SD-Card&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://amzn.to/2A2xwgg"&gt;Samsung EVO Plus Micro SDXC 64GB&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Power Supply&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://amzn.to/2z5Ty3L"&gt;Rydges EU 5V 3A Micro USB Stecker Netzteil&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;USB-Festplatte&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="http://amzn.to/2iNMyCA"&gt;Western Digital Elements Desktop&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Banana Pi File Server" src="/images/devices/banana-pi-file-server.jpg" /&gt;
&lt;p class="caption"&gt;Banana Pi File Server&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="software"&gt;
&lt;h3&gt;Software&lt;/h3&gt;
&lt;p&gt;Als Betriebsystem kommt ein Raspbian zum einsatz, welches direkt f√ºr den Banana Pi optimiert wurde.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.banana-pi.org/m1-download.html"&gt;http://www.banana-pi.org/m1-download.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Und als File Server Software wird &lt;a class="reference external" href="https://www.resilio.com/"&gt;Resilio Sync&lt;/a&gt; verwendet, da es sehr schnell Daten von einem zum anderen Ger√§t
transportiert, gratis in der einsteiger Version und 128 Bit AES end-zu-end verschl√ºsselt und dezentral (keine Router
konfiguration n√∂tig).&lt;/p&gt;
&lt;p&gt;Zur installation werden Teile von &lt;a class="reference external" href="https://github.com/linuxluigi/bananapi_resilio_sync"&gt;https://github.com/linuxluigi/bananapi_resilio_sync&lt;/a&gt; verwendet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="betriebsystem-downloaden"&gt;
&lt;h3&gt;Betriebsystem downloaden&lt;/h3&gt;
&lt;p&gt;Auf &lt;a class="reference external" href="http://www.banana-pi.org/m1-download.html"&gt;http://www.banana-pi.org/m1-download.html&lt;/a&gt; gehen und Raspbian downloaden &amp;amp; entpacken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sd-karte-vorbereiten"&gt;
&lt;h3&gt;SD-Karte vorbereiten&lt;/h3&gt;
&lt;p&gt;Dieser Part ist f√ºr Mac geschrieben aber die Befehle unter Linux sind sehr √§hnlich. Windows User sollten auf der
Offiziellen Raspberry Pi Seite gehen und dort die Anleitung folgen.
&lt;a class="reference external" href="https://www.raspberrypi.org/documentation/installation/installing-images/"&gt;https://www.raspberrypi.org/documentation/installation/installing-images/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Nachdem die Zip file entpackt wurde im Terminal &lt;tt class="docutils literal"&gt;diskutil list&lt;/tt&gt; eingeben um alle Datentr√§ger an zu zeigen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         251.0 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         250.7 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +250.7 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            225.3 GB   disk1s1
   2:                APFS Volume Preboot                 20.2 MB    disk1s2
   3:                APFS Volume Recovery                519.9 MB   disk1s3
   4:                APFS Volume VM                      3.2 GB     disk1s4

/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *16.0 GB    disk2
   1:                      Linux                         21.0 MB    disk2s1
   2:                      Linux                         16.0 GB    disk2s2
&lt;/pre&gt;
&lt;p&gt;Wenn die SD-Karte richtig initialisiert wurde sollte warscheinlich der letzte eintrag die SD-Karte sein &lt;tt class="docutils literal"&gt;/dev/disk2&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Um das Image auf der SC-Karte zu √ºbertragen wird &lt;tt class="docutils literal"&gt;dd&lt;/tt&gt; verwendet.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diskutil unmountDisk /dev/disk2
sudo dd bs=1m if=/path/to/2016-07-12-raspbian-lite-bpi-m1-m1p-r1.img of=/dev/disk2
&lt;/pre&gt;
&lt;p&gt;Jetzt noch SSH aktivieren indem auf der SD-Karte eine Datei namens &lt;tt class="docutils literal"&gt;ssh.txt&lt;/tt&gt; ohne Inhalt erstellt wird.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo touch /Volumes/BPI-BOOT/ssh.txt
&lt;/pre&gt;
&lt;p&gt;Die SD-Karte sollte nun fertig sein und bereit f√ºr den Banana Pi. Es kann ab hier auch schon alles an den Pi
angeschlossen und mit strom versorgt werden.&lt;/p&gt;
&lt;p&gt;Um die SD-Karte aus zu werfen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diskutil unmountDisk /dev/disk2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="raspbian-einrichten"&gt;
&lt;h3&gt;Raspbian einrichten&lt;/h3&gt;
&lt;p&gt;Mittels &lt;tt class="docutils literal"&gt;ssh&lt;/tt&gt; auf dem Pi einloggen. Die standart login daten sind: &lt;tt class="docutils literal"&gt;pi/bananapi&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;root/bananapi&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh pi&amp;#64;raspberrypi
&lt;/pre&gt;
&lt;p&gt;Nach dem einloggen am besten gleich das File System erweitern (Expand Filesystem). Daf√ºr die &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspi-config&lt;/span&gt;&lt;/tt&gt; verwenden,
in der Offiziellen Dokumentation sind die einzelnen Steps sehr ausf√ºhrlich beschrieben &amp;amp; was noch alles mit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspi-config&lt;/span&gt;&lt;/tt&gt;
gemacht werden kann: &lt;a class="reference external" href="https://www.raspberrypi.org/documentation/configuration/raspi-config.md"&gt;https://www.raspberrypi.org/documentation/configuration/raspi-config.md&lt;/a&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo raspi-config
sudo reboot
&lt;/pre&gt;
&lt;p&gt;Mittels &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;raspi-config&lt;/span&gt;&lt;/tt&gt; oder &lt;tt class="docutils literal"&gt;passwd&lt;/tt&gt; das root &amp;amp; user passwort √§ndern.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo raspi-config
passwd
sudo passwd
&lt;/pre&gt;
&lt;p&gt;Als n√§chstes das System updaten.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get update
sudo apt-get dist-upgrade
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="usb-festplatte-mounten"&gt;
&lt;h3&gt;USB-Festplatte mounten&lt;/h3&gt;
&lt;p&gt;Um zu sehen ob die USB Festplatte richtig angeschlossen ist &lt;tt class="docutils literal"&gt;sudo blkid &lt;span class="pre"&gt;-s&lt;/span&gt; UUID&lt;/tt&gt; ausf√ºhren und es
sollte so √§hnlich aussehen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/dev/mmcblk0p1: UUID=&amp;quot;35CB-ED62&amp;quot;
/dev/mmcblk0p2: UUID=&amp;quot;2cfc428f-9afc-4036-8533-bb437fd1bc36&amp;quot;
/dev/sda1: UUID=&amp;quot;a6c240d4-0f07-46b4-adcd-b9e32117a74b&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Wenn unter &lt;tt class="docutils literal"&gt;dev/sda1&lt;/tt&gt; auch ein Datentr√§ger angezeigt wird, kann die Festplatte nun formatiert werden.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo mkfs.ext4 -t /dev/sda1
&lt;/pre&gt;
&lt;p&gt;Damit die nun frisch formatierte festplatte gemountet werden kann, muss noch ein Ordner erstellt werden, wo die Festplatte
sp√§ter auf zu finden sein wird. In diesen Beispiel wird der Ordner unter &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/srv/resilio-sync/&lt;/span&gt;&lt;/tt&gt; sein.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo mkdir /srv/resilio-sync/
&lt;/pre&gt;
&lt;p&gt;Und mit dem folgenden Befehl wird die Festplatte mit jeden start automatisch unter &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/srv/resilio-sync/&lt;/span&gt;&lt;/tt&gt; gemountet.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo sh -c &amp;quot;echo '/dev/sda1 /srv/resilio-sync ext4 defaults,noatime,nodiratime,commit=600,errors=remount-ro 0 1' &amp;gt;&amp;gt; /etc/fstab&amp;quot;
&lt;/pre&gt;
&lt;p&gt;Mit &lt;tt class="docutils literal"&gt;sudo mount &lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/tt&gt; kann die Festplatte auch sofort gemountet werden.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resilio-sync-installieren"&gt;
&lt;h3&gt;Resilio-Sync installieren&lt;/h3&gt;
&lt;p&gt;Resilio Sync l√§sst sich einfach aus der Repo heraus installieren:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
echo 'deb http://linux-packages.resilio.com/resilio-sync/deb resilio-sync non-free' | sudo tee --append /etc/apt/sources.list.d/resilio-sync.list &amp;gt; /dev/null
wget -qO - https://linux-packages.resilio.com/resilio-sync/key.asc | sudo apt-key add -
sudo apt-get update
sudo apt-get install -y resilio-sync
# user rslsync
sudo systemctl enable resilio-sync
&lt;/pre&gt;
&lt;p&gt;Noch die Daten &amp;amp; Backup Ordner erstellen und &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;resilio-sync&lt;/span&gt;&lt;/tt&gt; User schreibrechte erteilen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo mkdir /srv/resilio-sync/server
sudo mkdir /srv/resilio-sync/backup
sudo chown -R rslsync:rslsync /srv/resilio-sync
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="backup"&gt;
&lt;h3&gt;Backup&lt;/h3&gt;
&lt;p&gt;In diesen Tutorial wird &lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; verwendet, es erstellt im Stundentakt Hardlinks von allen Datein und kann mit
dieser Technik St√ºndlich Backups √ºber einer Woche erstellt werden und ben√∂tigt in einigen f√§llen 10% und weniger Speicher
als die Eigentlichen Daten. Jedes Backup wird innerhalb weniger Sekunden erstellt bis auf das erste. Diese Backup
Version sollte nur verwendet werden wenn mehr als ein Resilio File Server zum einsatz kommt, das wichtige Daten mehrfach
physisch existieren!&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;rsnapshot&lt;/tt&gt; installieren:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install -y rsnapshot
&lt;/pre&gt;
&lt;p&gt;Das folgende Script ist sorgt daf√ºr das der Ordner &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/srv/resilio-sync/server&lt;/span&gt;&lt;/tt&gt; im Verzeichnis &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/srv/resilio-sync/backup&lt;/span&gt;&lt;/tt&gt;
gesichert wird.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo sh -c &amp;quot;echo 'backup\t/srv/resilio-sync/server/\tlocalhost' &amp;gt;&amp;gt; /etc/rsnapshot.conf&amp;quot;
sudo sed -i 's!snapshot_root\t/var/cache/rsnapshot/!snapshot_root\t/srv/resilio-sync/backup!g' /etc/rsnapshot.conf
&lt;/pre&gt;
&lt;p&gt;Die Backup intervalle sind in der Datei &lt;tt class="docutils literal"&gt;/etc/rsnapshot.conf` unter der Sektion `BACKUP INTERVALS&lt;/tt&gt; zu bearbeiten.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="security"&gt;
&lt;h3&gt;Security&lt;/h3&gt;
&lt;p&gt;Als wichtigtest ist es die Passw√∂rter von pi &amp;amp; root zu √§ndern, wie schon bei der Installation beschrieben. Das geht mit.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# for pi user
passwd
# for root user
sudo passwd
&lt;/pre&gt;
&lt;p&gt;Der n√§chste Step ist zum login nur noch SSH Public Keys zu verwenden. Dazu am besten
im Ubuntu wiki nachlesen wie es zu machen ist &lt;a class="reference external" href="https://wiki.ubuntuusers.de/SSH/#PubKeys"&gt;https://wiki.ubuntuusers.de/SSH/#PubKeys&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Wenn die Authenfizierung mit Public-Key funktioniert und auch nur wenn! Dann den Root user via SSH aussperren &amp;amp; der
Passwort login deaktivieren.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# secure ssh
sudo sed -i 's/PermitRootLogin prohibit-password/PermitRootLogin no/g' /etc/ssh/sshd_config
sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
# reload ssh server
sudo /etc/init.d/ssh reload
&lt;/pre&gt;
&lt;p&gt;Zum Schluss noch automatisch Sicherheits-Updates installieren lassen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# activate auto install security updates
sudo apt-get -y install unattended-upgrades
sudo sh -c &amp;quot;echo 'APT::Periodic::Update-Package-Lists &amp;quot;1&amp;quot;;' &amp;gt; /etc/apt/apt.conf.d/10periodic&amp;quot;
sudo sh -c &amp;quot;echo 'APT::Periodic::Update-Package-Lists &amp;quot;1&amp;quot;;' &amp;gt;&amp;gt; /etc/apt/apt.conf.d/10periodic&amp;quot;
sudo sh -c &amp;quot;echo 'APT::Periodic::Download-Upgradeable-Packages &amp;quot;1&amp;quot;;' &amp;gt;&amp;gt; /etc/apt/apt.conf.d/10periodic&amp;quot;
sudo sh -c &amp;quot;echo 'APT::Periodic::AutocleanInterval &amp;quot;7&amp;quot;;' &amp;gt;&amp;gt; /etc/apt/apt.conf.d/10periodic&amp;quot;
sudo sh -c &amp;quot;echo 'APT::Periodic::Unattended-Upgrade &amp;quot;1&amp;quot;;' &amp;gt;&amp;gt; /etc/apt/apt.conf.d/10periodic&amp;quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="cronjobs"&gt;
&lt;h3&gt;Cronjobs&lt;/h3&gt;
&lt;p&gt;Cronjobs lassen sich leicht via &lt;tt class="docutils literal"&gt;anacron&lt;/tt&gt; verwalten.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get -y install anacron
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;Backup&lt;/h4&gt;
&lt;p&gt;Folgendes Script sorgt daf√ºr, dass rsnapshot St√ºndlich, T√§glich &amp;amp; W√∂chentlich ausgef√ºhrt wird.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# hourly
sudo wget https://raw.githubusercontent.com/linuxluigi/bananapi_resilio_sync/master/cron/hourly/rsnapshot.sh -O /etc/cron.hourly/rsnapshot
sudo sed -i 's/alpha/hourly/g' /etc/cron.hourly/rsnapshot
sudo chmod +x /etc/cron.hourly/rsnapshot
# daily
sudo wget https://raw.githubusercontent.com/linuxluigi/bananapi_resilio_sync/master/cron/daily/rsnapshot.sh -O /etc/cron.daily/rsnapshot
sudo chmod +x /etc/cron.daily/rsnapshot
sudo sed -i 's/beta/daily/g' /etc/cron.daily/rsnapshot
# weekly
sudo wget https://raw.githubusercontent.com/linuxluigi/bananapi_resilio_sync/master/cron/weekly/rsnapshot.sh -O /etc/cron.weekly/rsnapshot
sudo chmod +x /etc/cron.weekly/rsnapshot
sudo sed -i 's/gamma/weekly/g' /etc/cron.weekly/rsnapshot
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="stability"&gt;
&lt;h4&gt;Stability&lt;/h4&gt;
&lt;p&gt;Nach meinen langzeit Erfahrung empfielt es sich bei Resilio Sync auf ein ARM Board es lieber am Tag ein mal neu zu starten
falls ein Prozess sich abw√ºrgt. Dies passiert sehr selten aber durch t√§gliches neustarten funktioniert das System 24/7
ohne weitere Wartung auch bei gro√üen Datenmengen. :)&lt;/p&gt;
&lt;p&gt;Au√üerdem ist sollte der Zeitserver st√ºndlich geupdatet werden, da Resilio Sync Daten nur Daten transferiert wenn alle
Ger√§te die gleiche Intere Zeit besitzten und wenn ein Pi aus dem Strom genommen wird, ist dieser nicht mehr Syncron.
Anders bei Desktop, Laptop oder gr√∂√üeren Servern wo eine interne Batterie die Zeit sichert.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# daily reboot the pi
sudo wget https://raw.githubusercontent.com/linuxluigi/bananapi_resilio_sync/master/cron/daily/resilio-restart.sh -O /etc/cron.daily/resilio-restart
sudo chmod +x /etc/cron.daily/resilio-restart

# cron ntp time hourly
sudo apt-get -y install ntp ntpdate
ntpdate -s 0.de.pool.ntp.org
sudo wget https://raw.githubusercontent.com/linuxluigi/bananapi_resilio_sync/master/cron/hourly/ntpdate.sh -O /etc/cron.hourly/ntpdate
sudo chmod +x /etc/cron.hourly/ntpdate
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="resilio-sync-einrichten"&gt;
&lt;h3&gt;Resilio Sync einrichten&lt;/h3&gt;
&lt;p&gt;Wenn alles geklappt habt k√∂nnt ihr euch auf eurern Pi mit dem Port &lt;tt class="docutils literal"&gt;8888&lt;/tt&gt; in der Web GUI von Resilio Sync einloggen.&lt;/p&gt;
&lt;p&gt;In den Einstellungen muss noch der Standart Ordner eingestellt werden &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/srv/resilio-sync/server&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="banana pi"></category><category term="raspberry pi"></category><category term="Resilio Sync"></category><category term="Bittorent Sync"></category><category term="home Server"></category><category term="file server"></category></entry><entry><title>Images aufspielen und sichern mit dem Terminal</title><link href="https://linuxluigi.com/posts/2017/Okt/31/dd/" rel="alternate"></link><published>2017-10-31T11:05:00+01:00</published><updated>2017-10-31T11:05:00+01:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2017-10-31:/posts/2017/Okt/31/dd/</id><summary type="html">&lt;p class="first last"&gt;Mac &amp;amp; Linux Images auf Speichermedium wie SD-Card &amp;amp; USB Stick aufspielen. Z.B. f√ºr Raspberry Pi.&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="mac-gerate-auflisten"&gt;
&lt;h2&gt;Mac Ger√§te auflisten&lt;/h2&gt;
&lt;p&gt;Unter mac kann mit &lt;tt class="docutils literal"&gt;diskutil list&lt;/tt&gt; alle Speicherger√§te aufgelistet werden&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diskutil list
&lt;/pre&gt;
&lt;p&gt;Beispiel ausgabe&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/dev/disk0 (internal):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      GUID_partition_scheme                         251.0 GB   disk0
   1:                        EFI EFI                     314.6 MB   disk0s1
   2:                 Apple_APFS Container disk1         250.7 GB   disk0s2

/dev/disk1 (synthesized):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:      APFS Container Scheme -                      +250.7 GB   disk1
                                 Physical Store disk0s2
   1:                APFS Volume Macintosh HD            225.3 GB   disk1s1
   2:                APFS Volume Preboot                 20.2 MB    disk1s2
   3:                APFS Volume Recovery                519.9 MB   disk1s3
   4:                APFS Volume VM                      3.2 GB     disk1s4

/dev/disk2 (external, physical):
   #:                       TYPE NAME                    SIZE       IDENTIFIER
   0:     FDisk_partition_scheme                        *16.0 GB    disk2
   1:                      Linux                         21.0 MB    disk2s1
   2:                      Linux                         16.0 GB    disk2s2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="sd-card-oder-usb-stick-iso-erstellen"&gt;
&lt;h2&gt;SD-Card oder USB Stick ISO erstellen&lt;/h2&gt;
&lt;p&gt;Mit &lt;tt class="docutils literal"&gt;dd&lt;/tt&gt; lassen sich Datentr√§ger als ISO abilden dabei gibt der Parameter &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; das Quellverzeichnis an &amp;amp; &lt;tt class="docutils literal"&gt;of&lt;/tt&gt;
das Ziel Verzeichnis. Beispiel beim Backup einer Raspbian SD-Card welches sich unter &lt;tt class="docutils literal"&gt;/dev/disk2&lt;/tt&gt; befindet und auf
dem Desktop &lt;tt class="docutils literal"&gt;~/Desktop/raspberrypi.dmg&lt;/tt&gt; gesichert werden soll.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo dd bs=1m if=/dev/disk2 of=~/Desktop/raspberrypi.dmg
&lt;/pre&gt;
&lt;p&gt;sudo dd bs=100m if=/dev/rdisk2 of=~/Desktop/raspberrypi.dmg
Dies kann einige Minuten in anspruch nehmen, je nachdem wie gro√ü die SD-Card ist &amp;amp; wie schnell die Daten√ºbertragungsrate
zwischen der Card und dem PC ist.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="iso-auf-datentrager-aufspielen"&gt;
&lt;h2&gt;ISO auf Datentr√§ger aufspielen&lt;/h2&gt;
&lt;p&gt;Wieder mit &lt;tt class="docutils literal"&gt;dd&lt;/tt&gt; lassen sich Datentr√§ger bearbeiten. Diesmal muss fast der gleiche Befehl eingegeben werden wie beim
erstellen einer ISO File nur &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;of&lt;/tt&gt; m√ºssen ausgetauscht werden.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diskutil unmountDisk /dev/disk2
sudo dd bs=1m if=~/Desktop/raspberrypi.dmg of=/dev/disk2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="mac-sd-card-oder-usb-auswerfen-im-terminal"&gt;
&lt;h2&gt;Mac SD-Card oder USB auswerfen im Terminal&lt;/h2&gt;
&lt;p&gt;Mittels &lt;tt class="docutils literal"&gt;diskutil list&lt;/tt&gt; das Ziel Ger√§t auslesen, meist unter Mac &lt;tt class="docutils literal"&gt;/dev/disk2&lt;/tt&gt; und dann via &lt;tt class="docutils literal"&gt;diskutil unmountDisk device&lt;/tt&gt;
auswerfen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
diskutil unmountDisk /dev/disk2
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="dd"></category><category term="shell"></category><category term="terminal"></category></entry><entry><title>Daten im Terminal finden -&gt; find</title><link href="https://linuxluigi.com/posts/2017/Okt/31/find/" rel="alternate"></link><published>2017-10-31T11:05:00+01:00</published><updated>2017-10-31T11:05:00+01:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2017-10-31:/posts/2017/Okt/31/find/</id><summary type="html">&lt;p class="first last"&gt;Linux &amp;amp; Mac daten im Terminal wieder finden, Beispiel kommandos&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="datentyp-rekrusiv-suchen"&gt;
&lt;h2&gt;Datentyp rekrusiv suchen&lt;/h2&gt;
&lt;p&gt;Um alle Daten mit der Endung &lt;tt class="docutils literal"&gt;txt&lt;/tt&gt; zu in aktuellen und allen unterordner auf zu listen&lt;/p&gt;
&lt;pre class="literal-block"&gt;
find . -type f -name \*.txt
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="find"></category><category term="shell"></category><category term="terminal"></category></entry><entry><title>SSH Befehle</title><link href="https://linuxluigi.com/posts/2017/Okt/31/ssh/" rel="alternate"></link><published>2017-10-31T11:05:00+01:00</published><updated>2017-10-31T11:05:00+01:00</updated><author><name>Steffen Exler</name></author><id>tag:linuxluigi.com,2017-10-31:/posts/2017/Okt/31/ssh/</id><summary type="html">&lt;p class="first last"&gt;Wichtige &amp;amp; h√§ufige SSH Befehle&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="authenfizierung-via-public-key"&gt;
&lt;h2&gt;Authenfizierung via Public Key&lt;/h2&gt;
&lt;p&gt;Public Key zum SSH Server hochladen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-copy-id -i ~/.ssh/id_rsa.pub user&amp;#64;hostname.example.com
&lt;/pre&gt;
&lt;div class="section" id="ssh-keyring-alten-fingerprint-entfernen"&gt;
&lt;h3&gt;SSH Keyring alten Fingerprint entfernen&lt;/h3&gt;
&lt;p&gt;Wenn der SSH Server neu installiert wurde und versucht man versucht sich mit seinen alten Login Daten ein zu loggen, wird
folgender Text erscheinen.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;
&amp;#64;    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     &amp;#64;
&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;&amp;#64;
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:Fd+wUMWEjj/eIcG4p8gs7uZMTjqfIpMr/46LNGW99J4.
Please contact your system administrator.
Add correct host key in ~/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in ~/.ssh/known_hosts:33
ECDSA host key for 192.168.100.100 has changed and you have requested strict checking.
Host key verification failed.
&lt;/pre&gt;
&lt;p&gt;Um den alten Fingerprint nun zu entfernen, kann &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;ssh-keygen&lt;/span&gt;&lt;/tt&gt; verwendet werden mit der folgenden syntax.:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-keygen -R 192.168.100.100
&lt;/pre&gt;
&lt;p&gt;Wobei darauf zu achten ist die IP &lt;tt class="docutils literal"&gt;192.168.100.100&lt;/tt&gt; mit der Ziel IP / Domain aus zu tauschen. Danach kann man den
neuen Fingerprint herunterladen und verifizieren.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="ssh"></category><category term="keyring"></category><category term="shell"></category><category term="terminal"></category></entry></feed>